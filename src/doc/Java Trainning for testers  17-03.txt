********************************************* Java Trainning for testers **********************************************************************



1/ class ==> Collection of variables and methods
2/ main() ==> Method can be present in same class
3/ main() ==> Method can be present in separate class

*** Data Type in Java 
1/Primitive data Type: int / double / char  / boolean / short / float ....
2/Derived data type :  string / Array / ArrayList / Hashmap .....

int x = 10; 
float X = 10.5 ;
double x = 10.555555;
char x = 'C';
string s = "Hello";

Variables :
int x ==> Declaration
int y, x ==> Declaration

x = 10; ==> initialization


*** Operators in Java
10 + 20 
+ ==> Operator


**/ Relational operator
== <> <= >= !=

**/ Conditional statement
loops / iterative statement / Jump Statement

******************************************************************************************


//* Part 1 *//

OOP ==> Object Oriented Programming

Object ==> Is an instance of a class
Method ==> Block of code witch contain a logic 

1/ class ==> Collection of variables and methods
2/ main() ==> Method can be present in same class
3/ main() ==> Method can be present in separate class


/* class variable */ 
We can assign values to variables in 3 ways 
1/ by using refrence variable
2/ By using method
3/ By using Constructor

/* Constructor */

2 Types of constructor
1/ Default Constructor
2/ Parametrized constructor

Def:
1/ A special type method
2/ Used for initializing the class
3/ Name should be same as class name
4/ Will not return any value
5/ Will invoke the time of object cration 

/* Methods */ ==> Block of code

1/ case 1: Not tacking parameters and also not returned any value
2/ case 2: Not tacking parameters but returning value
3/ case 3: Tacking parameters but not returned a value
4/ case 4: Tacking parameters and also returning a value

/ Method VS Constructor /

- The purpose of a method is to perform a task by executing java code
- The purpose of constructor is to initialize the object of class

//* Part 2 *//

- Overloading
- This keyword
- static variables and static methods


/* Overloading */

Creating methods / Constructor with the same name, with different parameters.

Advantages:

- Save memory
- Save Time

/* This keyword */

usage of java this keyword:

1/ this can be used to refer current class instance variable
2/ this can be used to invoke current class method
3/ this() can be used to invoke current class constructor
4/ this can be passed as an argument in method call
5/ this can be passed as an argument in constructor call
6/ this can be used to return the current class instance from method


/* static variables and static methods */

static ==> applicable for variable and method

* static method 
* static variable

1/ static method can access only static staff (directly) ==> without create an object
2/ static method can also access non static stuff but through object
3/ non static methods can access both static and non static stuff direct ==> True / False ?


//* Part 3 *//

- Java inheritance
- Method overriding 
- super keyword
- final keyword


/* Java inheritance*/

Acquiring all the properties from one class to another class is called inheritance.

5 types of inheritance:

1/ Single
2/ Multilevel
3/ Hirreachical
4/ Multiple
5/ Hybrid


/* Method overriding */

Rewrite the method in child classes:
1/Method difintion should be same
2/Body should be changed

Overloading                                                                      VS       Overriding
1/Change th difinition of method (number and data of parameters dhould be same)           1/We don't change the definition
                                                                                          2/ We should change only the body

/* super keyword */

==> use in inheritance
1/super can be used to refer immediate parent class instance variable
2/super can be used to invoke immediate parent class method
3/super() can be used to invoke immediate parent class constructor

/*final keyword*/

variable ==> You cannot change the value of the variable
Method ==> You cannot be ovveride in child class
Class ==> You cannot be extended into another class

//* Part 4 *//

*  Hybrid inheritance
*  Multiple inheritance

- Java interface
- Java package
- Acces modifier's

/*  Java interface */

- An interface in java is a blue print of class
- Interface contains final and static variables 
- Interface contains abstract method
==> An abstract method is a method contains definition but not body
- Method in interface are public by default 
- Interface support the functionnality of multiple inheritance 
- We can define interface with interface keyword 
- A class extends another class, an interface extends another interface but a class implement an interface 
- We can create object refrence for interface but we cannot instiantiate interface 


/* Java package */

package is a collection of classes / interfaces / files ......
import ==> is a command

2 Types of package:
1/ User defined packages (created by us)
2/ Buils in package

/* Acces modifier's */

Access  modifier's : Define the scope of variables and methods.

1/ public
2/ protected
3/ default
4/ private

 * private: The private access modifier's is accessible only within class
*  default: If you don't use any modifier's , it  is treated as defaulyt by default.
The dedault mofifier is accessible within package.
* protected: The protected access modifier is accessible within package and outside the package but through inheritance
* public :  we can access everywehere


//* Part 5*//

Exception Handling

Exception is an abnormal condition
In java, exception is an event that disput the normal flow of the program

2 Types of exception:

1/Checked exception: Identified by the compiler
Examples:
- InterruptedException
- IOException
- FileNotFoundException

2/Incheked exception: wich are not checked / Not indentified by the compiler
Examples:
- AritthmiticException
- NullPointerException
- ArrayIndexOutOfBoundsException

//* Part 6 *//

- ArrayList 
- Hashmap
- JDBC

/* ArrayList */

Array list ==> We can store any number and type of element.


** Single array
int a[5] = new a[5] ==> simple array

Limitations:
- We cannot store more the 5 element
- We cannot store multiple type of element 


Operations on array List:

- How to declare arraylist
- How to add element / values to arraylist
- Find size of arraylist
- Read value from arraylist
- Remove element / value from arraylist
- Insert a new element in the middle of arraylist



























